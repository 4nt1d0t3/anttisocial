{"version":3,"sources":["util/MuiStyles/theme.js","redux/reducers/userReducer.js","redux/reducers/dataReducer.js","redux/reducers/uiReducer.js","redux/store.js","redux/types.js","redux/actions/userActions.js","util/MyButton.js","util/MuiStyles/muiStyles.js","components/scream/PostScream.js","redux/actions/dataActions.js","components/layout/Notifications.js","components/layout/Navbar.js","util/AuthRoute.js","components/scream/DeleteScream.js","components/scream/LikeButton.js","components/scream/Comments.js","components/scream/CommentForm.js","components/scream/ScreamDialog.js","components/scream/Scream.js","components/profile/EditDetails.js","util/ProfileSkeleton.js","components/profile/Profile.js","util/ScreamSkeleton.js","pages/home.js","pages/login.js","pages/signup.js","components/profile/StaticProfile.js","pages/user.js","App.js","serviceWorker.js","index.js","images/distancing.png","images/no-img.png"],"names":["palette","primary","light","main","dark","secondary","typography","fontFamily","join","form","textAlign","image","maxWidth","pageTitle","textTransform","textField","margin","width","button","marginTop","marginBottom","position","customError","color","fontSize","progress","invisibleSeparator","border","visibleSeparator","borderBottom","initialState","loading","authenticated","credentials","likes","notifications","screams","scream","errors","middleware","thunk","reducers","combineReducers","user","state","action","type","payload","userHandle","handle","screamId","filter","like","forEach","notification","read","data","index","findIndex","likeCount","comments","splice","UI","store","createStore","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","logoutUser","dispatch","localStorage","removeItem","axios","defaults","headers","common","getUserData","get","then","res","catch","err","console","log","setAuthHeader","token","FBIdToken","setItem","children","onClick","tip","btnClassName","tipClassName","Tooltip","title","className","placement","IconButton","ProfileStyles","paper","padding","profile","top","left","height","objectFit","borderRadius","verticalAlign","theme","cursor","buttons","EditDetailsStyles","float","CommentStyles","commentImg","commentData","marginLeft","DeleteStyles","deleteButton","ScreamStyles","card","display","content","maxHeight","PostScreamStyles","closeButton","submitButton","ScreamDialogStyles","profileImg","dialogContent","expandButton","spinnerDiv","ProfileSkeletonStyles","backgroundColor","fullLine","ScreamSkeletonStyles","flexDirection","cover","minWidth","date","halfLine","NavBarStyles","appbar","logo","alignSelf","PostScream","useTheme","classes","makeStyles","useStyles","useDispatch","useSelector","shallowEqual","useState","open","setOpen","body","setBody","setErrors","handleClose","useEffect","MyButton","Dialog","onClose","fullWidth","DialogTitle","DialogContent","onSubmit","event","newScream","preventDefault","post","response","TextField","name","label","multiline","rows","placeholder","error","helperText","style","textfield","onChange","e","target","value","Button","variant","disabled","CircularProgress","size","Notifications","notificationIcon","anchorEl","setAnchorEl","dayjs","extend","relativeTime","handleClick","currentTarget","length","unReadNotifications","notif","Badge","badgeContent","notificationsMarkup","map","verb","time","createdAt","fromNow","iconColor","icon","marginRight","MenuItem","key","Typography","component","Link","to","recipient","sender","aria-controls","aria-haspopup","Menu","Boolean","onEntered","notificationIds","unReadNotificationIds","unReadNotif","notificationId","Navbar","AppBar","Avatar","src","AppLogo","Toolbar","AuthRoute","Component","rest","render","props","DeleteScream","handleDelete","delete","deleteScream","DialogActions","LikeButton","find","unlikeScream","likeScream","Comments","Grid","container","comment","userImg","item","sm","alt","format","CommentForm","submitComment","styles","ScreamDialog","openDialog","commentCount","oldPath","setOldPath","handleOpen","location","pathname","newPath","history","pushState","getOneScream","dialogMarkup","thickness","spacing","Scream","Card","raised","CardMedia","CardContent","EditDetails","bio","setBio","website","setWebsite","setLocation","handleSubmit","userDetails","editUserDetails","ProfileSkeleton","Paper","NoImg","Profile","imgUrl","id","hidden","files","formData","FormData","append","uploadImage","document","getElementById","click","href","rel","align","ScreamSkeleton","Array","from","Home","recentScreamsMarkUp","xs","paddingTop","Login","email","setEmail","password","setPassword","useHistory","userData","noValidate","push","loginUser","general","Signup","confirmPassword","setConfirmPassword","setHandle","newuserData","newUserData","signupUser","StaticProfile","User","setProfile","screamIdParam","setScreamIdParam","useParams","screamsMarkup","createMuiTheme","themeFile","baseURL","jwtDecode","exp","Date","now","App","ThemeProvider","exact","path","home","login","signup","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"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","file":"static/js/main.f1439738.chunk.js","sourcesContent":["export default {\n  palette: {\n    // type: 'dark',\n    primary: {\n      light: '#10E7DC',\n      main: '#d9b08c',\n      dark: '#0074E1',\n      // contrastText: '#fff',\n    },\n    secondary: {\n      // light: '#f2f2f2',\n      main: '#1B9CE5',\n      // dark: '#a7a7a7',\n      // contrastText: '#000',\n    },\n    typography: {\n      fontFamily: [\n        '-apple-system',\n        'BlinkMacSystemFont',\n        '\"Segoe UI\"',\n        'Roboto',\n        '\"Helvetica Neue\"',\n        'Arial',\n        'sans-serif',\n        '\"Apple Color Emoji\"',\n        '\"Segoe UI Emoji\"',\n        '\"Segoe UI Symbol\"',\n      ].join(','),\n    },\n    form: {\n      textAlign: 'center',\n    },\n    image: {\n      maxWidth: '15%',\n    },\n    pageTitle: {\n      textTransform: 'uppercase',\n    },\n    textField: {\n      margin: 10,\n      width: '40%',\n    },\n    button: {\n      marginTop: 20,\n      marginBottom: 20,\n      position: 'relative',\n    },\n    customError: {\n      color: '#FF0000',\n      fontSize: '0.8rem',\n      marginTop: 10,\n    },\n    progress: {\n      position: 'absolute',\n    },\n    invisibleSeparator: {\n      border: 'none',\n      margin: 4\n    },\n    visibleSeparator: {\n      width: '100%',\n      borderBottom: '1px solid rgba(0,0,0,0.1)',\n      marginBottom: 20\n    }\n  },\n};\n","import { SET_USER, SET_AUTHENTICATED, SET_UNAUTHENTICATED, LOADING_USER, LIKE_SCREAM, UNLIKE_SCREAM, MARK_NOTIFICATIONS_READ } from '../types';\n\nconst initialState = {\n  loading: false,\n  authenticated: false,\n  credentials: {},\n  likes: [],\n  notifications: [],\n};\n\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case SET_AUTHENTICATED:\n      return {\n        ...state,\n        authenticated: true,\n      };\n    case SET_UNAUTHENTICATED:\n      return initialState;\n    case SET_USER:\n      return {\n        ...state,\n        authenticated: true,\n        loading: false,\n        ...action.payload,\n      };\n    case LOADING_USER:\n      return {\n        ...state,\n        loading: true\n      }\n    case LIKE_SCREAM:\n      return {\n        ...state,\n        likes: [\n          ...state.likes,\n          {\n            userHandle: state.credentials.handle,\n            screamId: action.payload.screamId\n          }\n        ]\n      }\n    case UNLIKE_SCREAM:\n      return {\n        ...state,\n        likes: state.likes.filter(like => like.screamId !== action.payload.screamId)\n      }\n    case MARK_NOTIFICATIONS_READ:\n      state.notifications.forEach(notification => notification.read = true);\n      return {\n        ...state\n      }\n    default:\n      return state;\n  }\n}\n","import { SET_SCREAMS, SET_SCREAM, LIKE_SCREAM, UNLIKE_SCREAM, LOADING_DATA, DELETE_SCREAM, POST_SCREAM, SUBMIT_COMMENT } from '../types'\r\n\r\nconst initialState = {\r\n    screams: [],\r\n    scream: {},\r\n    loading: false\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    let index;\r\n    switch (action.type) {\r\n        case LOADING_DATA:\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            }\r\n        case SET_SCREAMS:\r\n            return {\r\n                ...state,\r\n                screams: action.payload,\r\n                loading: false\r\n            }\r\n        case SET_SCREAM:\r\n            return {\r\n                ...state,\r\n                scream: action.payload\r\n            }\r\n        case LIKE_SCREAM:\r\n        case UNLIKE_SCREAM:\r\n            //Find scream that is being (un)liked\r\n            index = state.screams.findIndex(scream => scream.screamId === action.payload.screamId);\r\n            state.screams[index] = action.payload;\r\n            //Update like count on the scream accordingly\r\n            if (state.scream.screamId === action.payload.screamId) {\r\n                state.scream.likeCount = action.payload.likeCount\r\n            }\r\n            return {\r\n                ...state,\r\n            }\r\n        case POST_SCREAM:\r\n            return {\r\n                ...state,\r\n                screams: [\r\n                    action.payload,\r\n                    ...state.screams\r\n                ]\r\n            }\r\n        case SUBMIT_COMMENT:\r\n            return {\r\n                ...state,\r\n                scream: {\r\n                    ...state.scream,\r\n                    comments: [action.payload, ...state.scream.comments]\r\n                }\r\n            }\r\n        case DELETE_SCREAM:\r\n            //Find the scream that will be deleted\r\n            index = state.screams.findIndex(scream => scream.screamId === action.payload)\r\n            //Remove the scream from state\r\n            state.screams.splice(index, 1);\r\n            return {\r\n                ...state\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import { SET_ERRORS, CLEAR_ERRORS, LOADING_UI, STOP_LOADING_UI } from '../types';\r\n\r\nconst initialState = {\r\n    loading: false,\r\n    errors: null\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_ERRORS:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                errors: action.payload\r\n            };\r\n        case CLEAR_ERRORS:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                errors: null,\r\n            };\r\n        case LOADING_UI:\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            }\r\n        case STOP_LOADING_UI:\r\n            return {\r\n                ...state,\r\n                loading: false\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import { createStore, combineReducers, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport userReducer from './reducers/userReducer';\nimport dataReducer from './reducers/dataReducer';\nimport uiReducer from './reducers/uiReducer';\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst reducers = combineReducers({\n  user: userReducer,\n  data: dataReducer,\n  UI: uiReducer,\n});\n\nconst store = createStore(\n  reducers,\n  initialState,\n  compose(applyMiddleware(...middleware), window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\n);\n\nexport default store;\n","//USER REDUCER TYPES\nexport const SET_AUTHENTICATED = 'SET_AUTHENTICATED';\nexport const SET_UNAUTHENTICATED = 'SET_UNAUTHENTICATED';\nexport const SET_USER = 'SET_USER';\nexport const LOADING_USER = 'LOADING_USER';\nexport const MARK_NOTIFICATIONS_READ = 'MARK_NOTIFICATIONS_READ'\n//UI REDUCER TYPES\nexport const SET_ERRORS = 'SET_ERRORS';\nexport const LOADING_UI = 'LOADING_UI';\nexport const LOADING_DATA = 'LOADING_DATA';\nexport const CLEAR_ERRORS = 'CLEAR_ERRORS';\nexport const STOP_LOADING_UI = 'STOP_LOADING_UI';\n//DATA REDUCER TYPES\nexport const SET_SCREAMS = 'SET_SCREAMS'\nexport const LIKE_SCREAM = 'LIKE_SCREAM'\nexport const UNLIKE_SCREAM = 'UNLIKE_SCREAM'\nexport const SET_SCREAM = 'SET_SCREAM'\nexport const DELETE_SCREAM = 'DELETE_SCREAM'\nexport const POST_SCREAM = 'POST_SCREAM'\nexport const SUBMIT_COMMENT = 'SUBMIT_COMMENT'\n","import { SET_USER, SET_ERRORS, CLEAR_ERRORS, LOADING_UI, SET_UNAUTHENTICATED, LOADING_USER, MARK_NOTIFICATIONS_READ } from '../types';\nimport axios from 'axios';\n\nexport const loginUser = (userData, history) => dispatch => {\n  dispatch({ type: LOADING_UI });\n  axios.post('/login', userData).then(res => {\n    //When user logs in, set authentication token in headers\n    setAuthHeader(res.data.token)\n    //Get user data and keep it in store\n    dispatch(getUserData());\n    //Clear errors\n    dispatch({ type: CLEAR_ERRORS });\n    //Redirect to homepage after succesfully logging in\n    history.push('/');\n  })\n    .catch(err => {\n      console.log(err)\n      //Set errors\n      dispatch({ type: SET_ERRORS, payload: err.response.data });\n    });\n};\n\nexport const signupUser = (newUserData, history) => dispatch => {\n  dispatch({ type: LOADING_UI });\n  axios.post('/signup', newUserData).then(res => {\n    //Same actions as with login user\n    setAuthHeader(res.data.token)\n    dispatch(getUserData());\n    dispatch({ type: CLEAR_ERRORS });\n    history.push('/');\n  })\n    .catch(err => {\n      console.log(err)\n      dispatch({ type: SET_ERRORS, payload: err.response.data });\n    });\n};\n\nexport const logoutUser = () => dispatch => {\n  //Delete authentication token\n  localStorage.removeItem('FBIdToken')\n  delete axios.defaults.headers.common['Authorization']\n  //Remove user from store\n  dispatch({ type: SET_UNAUTHENTICATED })\n}\n\nexport const getUserData = () => dispatch => {\n  dispatch({ type: LOADING_USER })\n  axios.get('/user').then(res => {\n    //Set user data in store\n    dispatch({ type: SET_USER, payload: res.data });\n  })\n    .catch(err => console.log(err));\n};\n\nexport const uploadImage = formData => dispatch => {\n  dispatch({ type: LOADING_USER })\n  axios.post('/user/image', formData).then(() => {\n    //Update user details in store\n    dispatch(getUserData())\n  })\n    .catch(err => console.log(err))\n}\n\nexport const editUserDetails = (userDetails) => (dispatch) => {\n  dispatch({ type: LOADING_USER });\n  axios.post('/user', userDetails).then(() => {\n    //Update user details in store\n    dispatch(getUserData());\n  })\n    .catch((err) => console.log(err));\n};\n\nexport const markNotificationsRead = notificationIds => dispatch => {\n  axios.post('/notifications', notificationIds).then(() => {\n    dispatch({ type: MARK_NOTIFICATIONS_READ })\n  }).catch(err => console.log(err))\n}\n//Helper function\nconst setAuthHeader = (token) => {\n  const FBIdToken = `Bearer ${token}`;\n  localStorage.setItem('FBIdToken', FBIdToken);\n  axios.defaults.headers.common['Authorization'] = FBIdToken;\n}","import React from 'react'\r\n//MUI\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\n\r\nexport default ({ children, onClick, tip, btnClassName, tipClassName }) => (\r\n    <Tooltip title={tip} className={tipClassName} placement='top'>\r\n        <IconButton onClick={onClick} className={btnClassName}>\r\n            {children}\r\n        </IconButton>\r\n    </Tooltip>\r\n)\r\n","import theme from './theme';\r\n\r\nexport const ProfileStyles = () => {\r\n    return {\r\n        paper: {\r\n            position: 'fixed',\r\n            width: '20%',\r\n            border: '20px solid #d1e8e2',\r\n            padding: 20\r\n        },\r\n        profile: {\r\n            '& .image-wrapper': {\r\n                textAlign: 'center',\r\n                position: 'relative',\r\n                '& button': {\r\n                    position: 'absolute',\r\n                    top: '80%',\r\n                    left: '70%'\r\n                }\r\n            },\r\n            '& .profile-image': {\r\n                width: 200,\r\n                height: 200,\r\n                objectFit: 'cover',\r\n                maxWidth: '100%',\r\n                borderRadius: '50%'\r\n            },\r\n            '& .profile-details': {\r\n                textAlign: 'center',\r\n                '& span, svg': {\r\n                    verticalAlign: 'middle'\r\n                },\r\n                '& a': {\r\n                    color: theme.palette.primary.main\r\n                }\r\n            },\r\n            '& hr': {\r\n                border: 'none',\r\n                margin: '0 0 10px 0'\r\n            },\r\n            '& svg.button': {\r\n                '&:hover': {\r\n                    cursor: 'pointer'\r\n                }\r\n            }\r\n        },\r\n        buttons: {\r\n            textAlign: 'center',\r\n            '& a': {\r\n                margin: '20px 10px'\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const EditDetailsStyles = () => {\r\n    return {\r\n        button: {\r\n            float: 'right',\r\n            margin: 0\r\n        }\r\n    }\r\n}\r\n\r\nexport const CommentStyles = () => {\r\n    return {\r\n        commentImg: {\r\n            maxWidth: '100%',\r\n            height: 100,\r\n            objectFit: 'cover',\r\n            borderRadius: '50%'\r\n        },\r\n        commentData: {\r\n            marginLeft: 20\r\n        }\r\n    }\r\n}\r\n\r\nexport const DeleteStyles = () => {\r\n    return {\r\n        deleteButton: {\r\n            position: 'absolute',\r\n            left: '90%',\r\n            top: '10%'\r\n        }\r\n    }\r\n}\r\n\r\nexport const ScreamStyles = () => {\r\n    return {\r\n        card: {\r\n            position: 'relative',\r\n            display: 'flex',\r\n            margin: 10,\r\n        },\r\n        content: {\r\n            padding: 25,\r\n        },\r\n        image: {\r\n            maxWidth: '25%',\r\n            maxHeight: 200\r\n        },\r\n    }\r\n}\r\n\r\nexport const PostScreamStyles = () => {\r\n    return {\r\n        closeButton: {\r\n            position: 'absolute',\r\n            left: '90%',\r\n            top: '6%'\r\n        },\r\n        submitButton: {\r\n            position: 'relative',\r\n            float: 'right',\r\n            marginTop: 10\r\n        }\r\n    }\r\n}\r\n\r\nexport const ScreamDialogStyles = () => {\r\n    return {\r\n        profileImg: {\r\n            maxWidth: '100%',\r\n            borderRadius: '50%',\r\n            objectFit: 'cover'\r\n        },\r\n        dialogContent: {\r\n            padding: 20\r\n        },\r\n        closeButton: {\r\n            position: 'absolute',\r\n            left: '90%'\r\n        },\r\n        expandButton: {\r\n            position: 'absolute',\r\n            left: '90%'\r\n        },\r\n        spinnerDiv: {\r\n            textAlign: 'center',\r\n            marginTop: 50,\r\n            marginBottom: 50\r\n        }\r\n    }\r\n}\r\n\r\nexport const ProfileSkeletonStyles = () => {\r\n    return {\r\n        handle: {\r\n            height: 20,\r\n            backgroundColor: theme.palette.primary.main,\r\n            width: 60,\r\n            margin: '0 auto 7px auto'\r\n        },\r\n        fullLine: {\r\n            height: 15,\r\n            backgroundColor: 'rgba(0,0,0,0.6)',\r\n            width: '90%',\r\n            marginBottom: 10,\r\n            marginLeft: '5%'\r\n        },\r\n        paper: {\r\n            padding: 20\r\n        },\r\n        profile: {\r\n            '& .image-wrapper': {\r\n                textAlign: 'center',\r\n                position: 'relative',\r\n                '& button': {\r\n                    position: 'absolute',\r\n                    top: '80%',\r\n                    left: '70%'\r\n                }\r\n            },\r\n            '& .profile-image': {\r\n                width: 200,\r\n                height: 200,\r\n                objectFit: 'cover',\r\n                maxWidth: '100%',\r\n                borderRadius: '50%'\r\n            },\r\n            '& .profile-details': {\r\n                textAlign: 'center',\r\n                '& span, svg': {\r\n                    verticalAlign: 'middle'\r\n                },\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const ScreamSkeletonStyles = () => {\r\n    return {\r\n        card: {\r\n            display: 'flex',\r\n            marginBottom: 20\r\n        },\r\n        content: {\r\n            width: '100%',\r\n            flexDirection: 'column',\r\n            padding: 25\r\n        },\r\n        cover: {\r\n            minWidth: 200,\r\n            objectFit: 'cover'\r\n        },\r\n        handle: {\r\n            width: 60,\r\n            height: 18,\r\n            backgroundColor: theme.palette.primary.main,\r\n            marginBottom: 7\r\n        },\r\n        date: {\r\n            height: 14,\r\n            width: 100,\r\n            backgroundColor: 'rgba(0,0,0,0.3)',\r\n            marginBottom: 10\r\n        },\r\n        fullLine: {\r\n            height: 15,\r\n            width: '90%',\r\n            marginBottom: 10,\r\n            backgroundColor: 'rgba(0,0,0,0.6)'\r\n        },\r\n        halfLine: {\r\n            height: 15,\r\n            width: '50%',\r\n            marginBottom: 10,\r\n            backgroundColor: 'rgba(0,0,0,0.6)'\r\n        },\r\n    }\r\n}\r\n\r\nexport const NavBarStyles = () => {\r\n    return {\r\n        appbar: {\r\n            flexDirection: 'row'\r\n        },\r\n        logo: {\r\n            alignSelf: 'center',\r\n            marginLeft: 10\r\n        }\r\n    }\r\n}","import React, { Fragment, useState, useEffect } from 'react'\r\nimport MyButton from '../../util/MyButton'\r\n//MUI\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { PostScreamStyles } from '../../util/MuiStyles/muiStyles';\r\n//Icons\r\nimport AddIcon from '@material-ui/icons/Add'\r\nimport CloseIcon from '@material-ui/icons/Close'\r\n//Redux\r\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux'\r\nimport { postScream } from '../../redux/actions/dataActions'\r\nimport { CLEAR_ERRORS } from '../../redux/types';\r\n\r\n\r\nfunction PostScream() {\r\n    //MUI\r\n    const { palette } = useTheme();\r\n    const useStyles = makeStyles(PostScreamStyles)\r\n    const classes = useStyles()\r\n    //Redux\r\n    const dispatch = useDispatch()\r\n    const UI = useSelector(state => state.UI, shallowEqual)\r\n    //State\r\n    const [open, setOpen] = useState(false);\r\n    const [body, setBody] = useState('');\r\n    const [errors, setErrors] = useState({});\r\n\r\n    //Set errors if there are any. Clear scream form when it's closed or submitted\r\n    useEffect(() => {\r\n        if (UI.errors) { setErrors(UI.errors) }\r\n        if (!UI.errors && !UI.loading) {\r\n            setBody('')\r\n            handleClose()\r\n        }\r\n    }, [UI.errors, UI.loading]) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    //Dispatch redux action that clears any possible errors when scream form is closed\r\n    function handleClose() {\r\n        setOpen(false);\r\n        setErrors({});\r\n        dispatch({ type: CLEAR_ERRORS });\r\n    }\r\n    //Dispatch scream action that saves new scream to DB\r\n    function handleSubmit(event) {\r\n        event.preventDefault();\r\n        dispatch(postScream({ body }))\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            {/* Button that opens scream form */}\r\n            <MyButton onClick={() => setOpen(true)} tip='Post a Scream!'>\r\n                <AddIcon />\r\n            </MyButton>\r\n            <Dialog\r\n                open={open}\r\n                onClose={handleClose}\r\n                fullWidth\r\n                maxWidth='sm'\r\n            >\r\n                {/* Close button for scream form */}\r\n                <MyButton tip='Close' onClick={() => handleClose()} tipClassName={classes.closeButton}>\r\n                    <CloseIcon />\r\n                </MyButton>\r\n                <DialogTitle>Post a new Scream</DialogTitle>\r\n                {/* Scream form */}\r\n                <DialogContent>\r\n                    <form onSubmit={handleSubmit}>\r\n                        <TextField\r\n                            name='body'\r\n                            type='text'\r\n                            label='SCREAM!!!'\r\n                            multiline\r\n                            rows='3'\r\n                            placeholder='Let it all out!!'\r\n                            // Show errors if there are any\r\n                            error={errors.body ? true : false}\r\n                            helperText={errors.body}\r\n                            style={palette.textfield}\r\n                            onChange={e => setBody(e.target.value)}\r\n                            fullWidth />\r\n                        <Button\r\n                            type='submit'\r\n                            variant='contained'\r\n                            color='primary'\r\n                            className={classes.submitButton}\r\n                            disabled={UI.loading}\r\n                        >\r\n                            Submit\r\n                            {/* Show loading icon while updating DB */}\r\n                            {UI.loading && (\r\n                                <CircularProgress size='1.5rem' style={palette.progress} />\r\n                            )}\r\n                        </Button>\r\n                    </form>\r\n                </DialogContent>\r\n            </Dialog>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default PostScream","import {\r\n    SET_SCREAMS,\r\n    SET_SCREAM,\r\n    LOADING_DATA,\r\n    LIKE_SCREAM,\r\n    UNLIKE_SCREAM,\r\n    DELETE_SCREAM,\r\n    CLEAR_ERRORS,\r\n    SET_ERRORS,\r\n    LOADING_UI,\r\n    POST_SCREAM,\r\n    STOP_LOADING_UI,\r\n    SUBMIT_COMMENT\r\n} from '../types'\r\nimport axios from 'axios';\r\n\r\n//Get all screams\r\nexport const getScreams = () => dispatch => {\r\n    dispatch({ type: LOADING_DATA });\r\n    axios.get('/screams').then(res => {\r\n        //Set screams in store to screams received from DB\r\n        dispatch({\r\n            type: SET_SCREAMS,\r\n            payload: res.data\r\n        })\r\n    }).catch(err => {\r\n        console.log(err)\r\n        //Set screams in store to an empty array if there is an error during the request\r\n        dispatch({ type: SET_SCREAMS, payload: [] })\r\n    })\r\n}\r\n\r\n//Get one scream\r\nexport const getOneScream = screamId => dispatch => {\r\n    //Set loading in store to true\r\n    dispatch({ type: LOADING_UI });\r\n    axios.get(`/screams/${screamId}`).then(res => {\r\n        //Set Scream in store to the scream received from DB\r\n        dispatch({ type: SET_SCREAM, payload: res.data });\r\n        //Set loading to false\r\n        dispatch({ type: STOP_LOADING_UI });\r\n    }).catch(err => console.log(err));\r\n}\r\n\r\n//Post a scream\r\nexport const postScream = newScream => dispatch => {\r\n    //Set loading in store to true\r\n    dispatch({ type: LOADING_UI });\r\n    axios.post('/scream', newScream).then(res => {\r\n        //If post request is succesfull, clear errors from store and add newly created scream to the page\r\n        dispatch({ type: CLEAR_ERRORS })\r\n        dispatch({ type: POST_SCREAM, payload: res.data });\r\n    }).catch(err => {\r\n        //If request fails, set errors\r\n        dispatch({ type: SET_ERRORS, payload: err.response.data })\r\n    })\r\n}\r\n\r\n//Like a Scream\r\nexport const likeScream = screamId => dispatch => {\r\n    axios.get(`/screams/${screamId}/like`)\r\n        .then(res => {\r\n            dispatch({ type: LIKE_SCREAM, payload: res.data })\r\n        }).catch(err => console.log(err))\r\n}\r\n\r\n//Unlike a Scream\r\nexport const unlikeScream = screamId => dispatch => {\r\n    axios.get(`/screams/${screamId}/unlike`)\r\n        .then(res => {\r\n            dispatch({ type: UNLIKE_SCREAM, payload: res.data })\r\n        }).catch(err => console.log(err))\r\n}\r\n\r\n//Submit comment\r\nexport const submitComment = (screamId, commentData) => dispatch => {\r\n    axios.post(`/screams/${screamId}/comment`, commentData)\r\n        .then(res => {\r\n            //If post request is succesfull, clear errors from store and add newly created comment to the page\r\n            dispatch({ type: SUBMIT_COMMENT, payload: res.data });\r\n            dispatch({ type: CLEAR_ERRORS });\r\n        })\r\n        .catch(err => {\r\n            //If request fails, set errors\r\n            dispatch({ type: SET_ERRORS, payload: err.response.data })\r\n        })\r\n}\r\n\r\n//Get user data\r\nexport const getUserData = userHandle => dispatch => {\r\n    dispatch({ type: LOADING_DATA });\r\n    axios.get(`/user/${userHandle}`).then(res => {\r\n        //Set screams in store to the users screams\r\n        dispatch({\r\n            type: SET_SCREAMS,\r\n            payload: res.data.screams\r\n        })\r\n        //Set screams in store to nothing\r\n    }).catch(() => dispatch({ type: SET_SCREAMS, payload: null }))\r\n}\r\n\r\n//Delete Scream\r\nexport const deleteScream = screamId => dispatch => {\r\n    axios.delete(`/screams/${screamId}`).then(() => {\r\n        //Delete the intended scream from DB\r\n        dispatch({ type: DELETE_SCREAM, payload: screamId })\r\n    }).catch(err => console.log(err))\r\n}","import React, { useState, Fragment } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport dayjs from 'dayjs';\r\nimport relativeTime from 'dayjs/plugin/relativeTime';\r\n//MUI\r\nimport Menu from '@material-ui/core/Menu'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Tooltip from '@material-ui/core/Tooltip'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Badge from '@material-ui/core/Badge'\r\n//Icons\r\nimport NotificationsIcon from '@material-ui/icons/Notifications'\r\nimport FavoriteIcon from '@material-ui/icons/Favorite'\r\nimport ChatIcon from '@material-ui/icons/Chat'\r\n//Redux\r\nimport { markNotificationsRead } from '../../redux/actions/userActions'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nfunction Notifications() {\r\n    //Redux\r\n    const dispatch = useDispatch()\r\n    const notifications = useSelector(state => state.user.notifications)\r\n    //State\r\n    const [anchorEl, setAnchorEl] = useState(null)\r\n    //Util\r\n    dayjs.extend(relativeTime);\r\n    let notificationIcon;\r\n    //Event handlers\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n    const handleClose = () => {\r\n        setAnchorEl(null)\r\n    }\r\n    //========================================\r\n    //Set notifications read after opening menu\r\n    const onMenuOpen = () => {\r\n        let unReadNotificationIds = notifications.filter(notif => !notif.read).map(unReadNotif => unReadNotif.notificationId)\r\n        dispatch(markNotificationsRead(unReadNotificationIds))\r\n    }\r\n    //Check for unread notifications and set a badge to show them on the navbar\r\n    if (notifications && notifications.length > 0) {\r\n        let unReadNotifications = notifications.filter(notif => notif.read === false)\r\n        //If there are unread notifications\r\n        unReadNotifications.length > 0 ? (\r\n            notificationIcon = (\r\n                <Badge badgeContent={unReadNotifications.length} color='secondary'>\r\n                    <NotificationsIcon />\r\n                </Badge>\r\n            )\r\n        ) : (\r\n        //If not\r\n                notificationIcon = <NotificationsIcon />\r\n            )\r\n    } else {\r\n        notificationIcon = <NotificationsIcon />\r\n    }\r\n    //Variable that will be rendered with conditions\r\n    let notificationsMarkup =\r\n        //Are there any notifications to display?\r\n        notifications && notifications.length > 0 ? (\r\n            //If yes, loop through all notifications and style them accordingly\r\n            notifications.map(notif => {\r\n                const verb = notif.type === 'like' ? ' liked' : ' commented on'\r\n                const time = dayjs(notif.createdAt).fromNow();\r\n                const iconColor = notif.read ? 'primary' : 'secondary'\r\n                //Set the icon depending on the type of the notification\r\n                const icon = notif.type === 'like' ? (\r\n                    <FavoriteIcon color={iconColor} style={{ marginRight: 10 }} />\r\n                ) : (\r\n                        <ChatIcon color={iconColor} style={{ marginRight: 10 }} />\r\n                    )\r\n                //and render the notifications here\r\n                return (\r\n                    <MenuItem key={notif.createdAt} onClick={handleClick}>\r\n                        {icon}\r\n                        <Typography\r\n                            component={Link}\r\n                            color='primary'\r\n                            variant='body1'\r\n                            to={`/users/${notif.recipient}/scream/${notif.screamId}`}\r\n                        >\r\n                            {notif.sender}{verb} your scream {time}\r\n                        </Typography>\r\n                    </MenuItem>\r\n                )\r\n            })\r\n        ) : (\r\n                //If no notifications, render this\r\n                <MenuItem onClick={handleClick} >\r\n                    You have no notifications yet\r\n                </MenuItem>\r\n            )\r\n    //How the component is actually rendered\r\n    return (\r\n        <Fragment>\r\n            <Tooltip placement='top' title='Notifications'>\r\n                <IconButton aria-controls=\"simple-menu\"\r\n                    aria-haspopup='true'\r\n                    onClick={handleClick}\r\n                >\r\n                    {notificationIcon}\r\n                </IconButton>\r\n            </Tooltip>\r\n            <Menu\r\n                anchorEl={anchorEl}\r\n                open={Boolean(anchorEl)}\r\n                onClose={handleClose}\r\n                onEntered={onMenuOpen}\r\n            >\r\n                {notificationsMarkup}\r\n            </Menu>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default Notifications","import React, { Fragment } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useSelector } from 'react-redux'\nimport MyButton from '../../util/MyButton'\nimport PostScream from '../scream/PostScream'\nimport Notifications from './Notifications'\nimport AppLogo from '../..//images/distancing.png';\n//MUI\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Button from '@material-ui/core/Button';\nimport Avatar from '@material-ui/core/Avatar'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { NavBarStyles } from '../../util/MuiStyles/muiStyles'\n//Icons\nimport HomeIcon from '@material-ui/icons/Home'\n\nfunction Navbar() {\n  //MUI\n  const useStyles = makeStyles(NavBarStyles)\n  const classes = useStyles()\n  //Redux\n  const authenticated = useSelector(state => state.user.authenticated)\n\n  return (\n    <AppBar className={classes.appbar}>\n      <Avatar variant=\"rounded\" src={AppLogo} className={classes.logo} />\n      <Toolbar className='nav-container'>\n        {/* Check if user is logged in and change navbar accordingly */}\n        {authenticated ? (\n          <Fragment>\n            <PostScream />\n            <Link to='/'>\n              <MyButton tip='Home'>\n                <HomeIcon />\n              </MyButton>\n            </Link>\n            <Notifications />\n          </Fragment>\n        ) : (\n            <Fragment>\n              <Button color='inherit' component={Link} to='/login'>\n                Login\n        </Button>\n              <Button color='inherit' component={Link} to='/'>\n                Home\n        </Button>\n              <Button color='inherit' component={Link} to='/signup'>\n                Signup\n        </Button>\n            </ Fragment>\n          )\n        }\n      </Toolbar >\n    </AppBar >\n  );\n}\n\nexport default Navbar;\n","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { useSelector } from 'react-redux'\n\nconst AuthRoute = ({ component: Component, ...rest }) => {\n  const authenticated = useSelector(state => state.user.authenticated)\n  return (\n    <Route\n      {...rest}\n      //Render a different page depending on if the user is logged in\n      render={props =>\n        authenticated ? <Redirect to='/' /> : <Component {...props} />\n      }\n    />\n  );\n}\n\nexport default AuthRoute;\n","import React, { Fragment, useState } from 'react'\r\nimport MyButton from '../../util/MyButton'\r\n//MUI\r\nimport Button from '@material-ui/core/Button'\r\nimport Dialog from '@material-ui/core/Dialog'\r\nimport DialogTitle from '@material-ui/core/DialogTitle'\r\nimport DialogActions from '@material-ui/core/DialogActions'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { DeleteStyles } from '../../util/MuiStyles/muiStyles'\r\n//Icons\r\nimport DeleteIcon from '@material-ui/icons/DeleteOutline'\r\n//Redux\r\nimport { useDispatch } from 'react-redux'\r\nimport { deleteScream } from '../../redux/actions/dataActions'\r\n\r\n\r\nfunction DeleteScream({ screamId }) {\r\n    //MUI\r\n    const useStyles = makeStyles(DeleteStyles)\r\n    const classes = useStyles()\r\n    //Redux\r\n    const dispatch = useDispatch()\r\n    //State\r\n    const [open, setOpen] = useState(false)\r\n\r\n    //Dispatch redux action that deletes the scream from DB\r\n    const handleDelete = () => {\r\n        dispatch(deleteScream(screamId));\r\n        setOpen(false)\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            {/* Button that opens the delete window */}\r\n            <MyButton tip='Delete Scream' onClick={() => setOpen(true)} btnClassName={classes.deleteButton}>\r\n                <DeleteIcon color='primary' />\r\n            </MyButton>\r\n            <Dialog\r\n                open={open}\r\n                onClose={() => setOpen(false)}\r\n                fullWidth\r\n                maxWidth='sm'\r\n            >\r\n                <DialogTitle>\r\n                    Are you sure you want to Delete this Scream?\r\n                </DialogTitle>\r\n                <DialogActions>\r\n                    <Button onClick={() => setOpen(false)} color='primary'>Cancel</Button>\r\n                    <Button onClick={() => handleDelete()} color='secondary'>Delete</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default DeleteScream","import React from 'react'\r\nimport MyButton from '../../util/MyButton'\r\nimport { Link } from 'react-router-dom'\r\n//Icons\r\nimport FavoriteIcon from '@material-ui/icons/Favorite'\r\nimport FavoriteBorder from '@material-ui/icons/FavoriteBorder'\r\n//Redux\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { likeScream, unlikeScream } from '../../redux/actions/dataActions'\r\n\r\nfunction LikeButton({ screamId }) {\r\n    //Redux\r\n    const user = useSelector(state => state.user)\r\n    const dispatch = useDispatch()\r\n\r\n    //Check if current user has liked this scream\r\n    const likedScream = () => {\r\n        if (user.likes && user.likes.find(like => like.screamId === screamId)) {\r\n            return true\r\n        } else {\r\n            return false\r\n        }\r\n    }\r\n    //==================\r\n    //What is rendered \r\n    //==================\r\n    //Check if user is logged in\r\n    const likeButton = !user.authenticated ? (\r\n        //If not logged in, redirect to login page\r\n        <Link to='/login'>\r\n            <MyButton tip='Like'>\r\n                <FavoriteBorder color='primary' />\r\n            </MyButton>\r\n        </Link>\r\n    ) : (\r\n            //If logged in, check if user has already liked the scream\r\n            likedScream() ? (\r\n                //If already liked, set icon to unlike\r\n                <MyButton tip='Unlike' onClick={() => dispatch(unlikeScream(screamId))}>\r\n                    <FavoriteIcon color='primary' />\r\n                </MyButton>\r\n            ) : (\r\n                    //If not liked, set icon to like\r\n                    <MyButton tip='Like' onClick={() => dispatch(likeScream(screamId))}>\r\n                        <FavoriteBorder color='primary' />\r\n                    </MyButton>\r\n                )\r\n        )\r\n    return likeButton\r\n}\r\n\r\nexport default LikeButton","import React, { Fragment } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport dayjs from 'dayjs'\r\n//MUI\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport { CommentStyles } from '../../util/MuiStyles/muiStyles';\r\n\r\n\r\nfunction Comments({ comments }) {\r\n    //MUI\r\n    const { palette } = useTheme();\r\n    const useStyles = makeStyles(CommentStyles)\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Grid container>\r\n            {/* Render each comment as follows: */}\r\n            {comments.map((comment, index) => {\r\n                const { body, createdAt, userImg, userHandle } = comment;\r\n                return (\r\n                    <Fragment key={createdAt}>\r\n                        <Grid item sm={12}>\r\n                            <Grid container>\r\n                                <Grid item sm={2}>\r\n                                    {/* Profile picture of the user who submitted the comment */}\r\n                                    <img src={userImg} alt='Profile' className={classes.commentImg} />\r\n                                </Grid>\r\n                                <Grid item sm={9}>\r\n                                    <div className={classes.commentData}>\r\n                                        {/* Link to the commenting users profile */}\r\n                                        <Typography\r\n                                            variant='h5'\r\n                                            component={Link}\r\n                                            to={`/users/${userHandle}`}\r\n                                            color='primary'\r\n                                        >\r\n                                            {userHandle}\r\n                                        </Typography>\r\n                                        {/* When the comment was submitted */}\r\n                                        <Typography variant='body2' color='textSecondary'>\r\n                                            {dayjs(createdAt).format('h:mm a, MMMM DD YYYY')}\r\n                                        </Typography>\r\n                                        <hr style={palette.invisibleSeparator} />\r\n                                        {/* The actual comment */}\r\n                                        <Typography variant='body1'>\r\n                                            {body}\r\n                                        </Typography>\r\n                                    </div>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        {/* Do not render hr after last comment */}\r\n                        {index !== comments.length - 1 && (<hr style={palette.visibleSeparator} />)}\r\n                    </Fragment>\r\n                )\r\n            })}\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Comments","import React, { useState, useEffect } from 'react'\r\n//MUI\r\nimport { useTheme } from '@material-ui/core/styles'\r\nimport Button from '@material-ui/core/Button'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport TextField from '@material-ui/core/TextField'\r\n//Redux\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { submitComment } from '../../redux/actions/dataActions'\r\n\r\n\r\nfunction CommentForm({ screamId }) {\r\n    //MUI\r\n    const { palette } = useTheme()\r\n    //Redux\r\n    const dispatch = useDispatch()\r\n    const UI = useSelector(state => state.UI)\r\n    const authenticated = useSelector(state => state.user.authenticated)\r\n    //State\r\n    const [errors, setErrors] = useState({})\r\n    const [body, setBody] = useState('')\r\n\r\n    //Set errors if there are any\r\n    useEffect(() => {\r\n        if (UI.errors) { setErrors(UI.errors) }\r\n    }, [UI.errors])\r\n    //Dispatch redux action that saves the new comment to DB\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        dispatch(submitComment(screamId, { body }))\r\n        setBody('')\r\n    }\r\n    //==================\r\n    //What is rendered \r\n    //==================\r\n    //Check if user is logged in\r\n    const commentFormMarkup = authenticated ? (\r\n        //Display new comment form if logged in\r\n        <Grid item sm={12} style={{ textAlign: 'center' }}>\r\n            <form onSubmit={handleSubmit}>\r\n                <TextField\r\n                    name='body'\r\n                    type='text'\r\n                    label='Comment on Scream'\r\n                    error={errors.comment ? true : false}\r\n                    helperText={errors.comment}\r\n                    value={body}\r\n                    onChange={e => setBody(e.target.value)}\r\n                    fullWidth\r\n                    multiline\r\n                    rows={2}\r\n                    style={palette.textField}\r\n                />\r\n                <Button type='submit' variant='contained' color='primary' style={palette.button}>\r\n                    Submit\r\n                </Button>\r\n            </form>\r\n            <hr styles={palette.visibleSeparator} />\r\n        </Grid>\r\n        //If not logged in, don't display comment field\r\n    ) : null\r\n\r\n    return commentFormMarkup\r\n}\r\n\r\nexport default CommentForm","import React, { Fragment, useState, useEffect } from 'react'\r\nimport MyButton from '../../util/MyButton'\r\nimport dayjs from 'dayjs'\r\nimport { Link } from 'react-router-dom'\r\nimport LikeButton from './LikeButton';\r\nimport Comments from './Comments';\r\nimport CommentForm from './CommentForm'\r\n//MUI\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { ScreamDialogStyles } from '../../util/MuiStyles/muiStyles';\r\n//Icons\r\nimport CloseIcon from '@material-ui/icons/Close'\r\nimport UnfoldMore from '@material-ui/icons/UnfoldMore'\r\nimport ChatIcon from '@material-ui/icons/Chat'\r\n//Redux\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { getOneScream } from '../../redux/actions/dataActions'\r\nimport { CLEAR_ERRORS } from '../../redux/types';\r\n\r\nfunction ScreamDialog({ screamId, userHandle, openDialog }) {\r\n    //MUI\r\n    const { palette } = useTheme()\r\n    const useStyles = makeStyles(ScreamDialogStyles)\r\n    const classes = useStyles();\r\n    //Redux\r\n    const { createdAt,\r\n        body,\r\n        likeCount,\r\n        comments,\r\n        userImg,\r\n        userHandle: handle,\r\n        commentCount\r\n    } = useSelector(state => state.data.scream)\r\n    const { loading } = useSelector(state => state.UI)\r\n    const dispatch = useDispatch()\r\n    //State\r\n    const [open, setOpen] = useState(false)\r\n    const [oldPath, setOldPath] = useState('')\r\n    //Event handlers\r\n    function handleOpen() {\r\n        //Set URL correctly when scream is expanded\r\n        let oldPath = window.location.pathname;\r\n        const newPath = (`/users/${userHandle}/scream/${screamId}`);\r\n        //Old path will only be the same as new path if scream is accessed directly from the users profile page.\r\n        // In that case set URL to users profile page\r\n        if (oldPath === newPath) oldPath = `/users/${userHandle}`;\r\n        window.history.pushState(null, null, newPath)\r\n        setOldPath(oldPath)\r\n        setOpen(true);\r\n        //Dispatch redux action that retrieves the desired scream from DB\r\n        dispatch(getOneScream(screamId))\r\n    }\r\n    function handleClose() {\r\n        //Set URL to what it was before\r\n        window.history.pushState(null, null, oldPath)\r\n        setOpen(false);\r\n        //Clear errors in redux\r\n        dispatch({ type: CLEAR_ERRORS })\r\n    }\r\n    //If a user loads the scream directly from the URL, open scream dialog for that scream in question.\r\n    //openDialog is passed down from user page\r\n    useEffect(() => {\r\n        if (openDialog) {\r\n            handleOpen()\r\n        }\r\n    }, [openDialog])// eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    //==================\r\n    //What is rendered \r\n    //==================\r\n    const dialogMarkup = loading ? (\r\n        //While scream is loading, show loading icon\r\n        <div className={classes.spinnerDiv}>\r\n            <CircularProgress size={150} thickness={2} />\r\n        </div>\r\n    ) : (\r\n            //After scream has finished loading, show the scream details\r\n            <Grid container spacing={2}>\r\n                <Grid item sm={5}>\r\n                    {/* Profile picture of the user who posted the scream */}\r\n                    <img src={userImg} alt='Profile' className={classes.profileImg} />\r\n                </Grid>\r\n                <Grid item sm={7}>\r\n                    {/* Link to the users profile who posted the scream */}\r\n                    <Typography\r\n                        component={Link}\r\n                        color='primary'\r\n                        variant='h5'\r\n                        to={`/users/${handle}`}\r\n                    >\r\n                        @{handle}\r\n                    </Typography>\r\n                    <hr style={palette.invisibleSeparator} />\r\n                    {/* When the scream was posted */}\r\n                    <Typography variant='body2' color='textSecondary'>\r\n                        {dayjs(createdAt).format('h:mm a, MMMM DD YYYY')}\r\n                    </Typography>\r\n                    <hr style={palette.invisibleSeparator} />\r\n                    {/* Content of the scream */}\r\n                    <Typography variant='body1'>\r\n                        {body}\r\n                    </Typography>\r\n                    {/* Likes */}\r\n                    <LikeButton screamId={screamId} />\r\n                    <span>{likeCount} Likes</span>\r\n                    {/* Comments */}\r\n                    <MyButton tip='Comments'>\r\n                        <ChatIcon color='primary' />\r\n                    </MyButton>\r\n                    <span>{commentCount} Comments</span>\r\n                </Grid>\r\n                <hr style={palette.visibleSeparator} />\r\n                {/* Comment form for posting a new comment */}\r\n                <CommentForm screamId={screamId} />\r\n                <Comments comments={comments} />\r\n            </Grid>\r\n        )\r\n    return (\r\n        <Fragment>\r\n            {/* Button that opens the scream dialog */}\r\n            <MyButton onClick={() => handleOpen()} tip='Expand Scream' tipClassName={classes.expandButton}>\r\n                <UnfoldMore color='primary' />\r\n            </MyButton>\r\n            <Dialog\r\n                open={open}\r\n                onClose={() => handleClose()}\r\n                fullWidth\r\n                maxWidth='sm'\r\n            >\r\n                {/* Close button for scream dialog */}\r\n                <MyButton tip='Close' onClick={() => handleClose()} tipClassName={classes.closeButton}>\r\n                    <CloseIcon />\r\n                </MyButton>\r\n                <DialogContent className={classes.dialogContent}>\r\n                    {/* Scream dialog as described above */}\r\n                    {dialogMarkup}\r\n                </DialogContent>\r\n            </Dialog>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default ScreamDialog","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport MyButton from '../../util/MyButton'\nimport DeleteScream from './DeleteScream'\nimport ScreamDialog from './ScreamDialog'\nimport LikeButton from './LikeButton'\n//MUI imports\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Typography from '@material-ui/core/Typography';\nimport { ScreamStyles } from '../../util/MuiStyles/muiStyles';\n//Icons\nimport ChatIcon from '@material-ui/icons/Chat'\n//Redux\nimport { useSelector } from 'react-redux';\n\n\nfunction Scream({ scream, openDialog }) {\n  //MUI\n  const useStyles = makeStyles(ScreamStyles);\n  const classes = useStyles();\n  //Redux\n  const { authenticated, credentials:{handle} } = useSelector(state => state.user)\n  //Util\n  dayjs.extend(relativeTime);\n  //Show delete button if current user posted the scream\n  const deleteButton = authenticated && scream.userHandle === handle ? (\n    <DeleteScream screamId={scream.screamId} />\n  ) : null;\n\n  return (\n    <Card raised className={classes.card}>\n      {/* Profile picture of the user who posted the scream */}\n      <CardMedia\n        className={classes.image}\n        component='img'\n        image={scream.userImg}\n        title='Profile Image'\n      />\n      <CardContent className={classes.content}>\n        {/* Link to the users page who posted the scream */}\n        <Typography\n          color='primary'\n          variant='h5'\n          component={Link}\n          to={`/users/${scream.userHandle}`}\n        >\n          {scream.userHandle}\n        </Typography>\n        {deleteButton}\n        {/* When the scream was posted */}\n        <Typography variant='body2' color='textSecondary'>\n          {dayjs(scream.createdAt).fromNow()}\n        </Typography>\n        {/* Scream content */}\n        <Typography variant='body1'>{scream.body}</Typography>\n        {/* Likes */}\n        <LikeButton screamId={scream.screamId} />\n        <span>{scream.likeCount} Likes</span>\n        {/* Comments */}\n        <MyButton tip='Comments' >\n          <ChatIcon color='primary' />\n        </MyButton>\n        <span>{scream.commentCount} Comments</span>\n        {/* Expand scream to show comments and add comments if logged in */}\n        <ScreamDialog screamId={scream.screamId} userHandle={scream.userHandle} openDialog={openDialog} />\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default Scream","import React, { Fragment, useState, useEffect } from 'react'\r\nimport MyButton from '../../util/MyButton'\r\n//MUI\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { EditDetailsStyles } from '../../util/MuiStyles/muiStyles'\r\n//Icons\r\nimport EditIcon from '@material-ui/icons/Edit'\r\n//Redux\r\nimport { useSelector, shallowEqual, useDispatch } from 'react-redux'\r\nimport { editUserDetails } from '../../redux/actions/userActions'\r\n\r\n\r\nfunction EditDetails() {\r\n    //MUI\r\n    const useStyles = makeStyles(EditDetailsStyles)\r\n    const classes = useStyles()\r\n    //Redux\r\n    const credentials = useSelector(state => state.user.credentials, shallowEqual)\r\n    const dispatch = useDispatch()\r\n    //State\r\n    const [bio, setBio] = useState('')\r\n    const [website, setWebsite] = useState('')\r\n    const [location, setLocation] = useState('')\r\n    const [open, setOpen] = useState(false)\r\n\r\n    //On load, set state\r\n    useEffect(() => {\r\n        setBio(credentials.bio ? credentials.bio : '')\r\n        setWebsite(credentials.website ? credentials.website : '')\r\n        setLocation(credentials.location ? credentials.location : '')\r\n    }, []) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    //When submitted, set new details\r\n    const handleSubmit = () => {\r\n        const userDetails = { bio, website, location };\r\n        setOpen(false)\r\n        dispatch(editUserDetails(userDetails));\r\n    }\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n            {/* Button below users profile pick that opens edit details form */}\r\n            <MyButton tip='Edit Details' onClick={() => setOpen(true)} btnClassName={classes.button} >\r\n                <EditIcon color='primary' />\r\n            </MyButton>\r\n            {/* Edit details form */}\r\n            <Dialog\r\n                open={open}\r\n                onClose={() => setOpen(false)}\r\n                fullWidth\r\n                maxWidth='sm'>\r\n                <DialogTitle>Edit your details</DialogTitle>\r\n                <DialogContent>\r\n                    <form>\r\n                        <TextField\r\n                            name='bio'\r\n                            type='text'\r\n                            label='Bio'\r\n                            multiline\r\n                            rows='2'\r\n                            placeholder='A short personal bio'\r\n                            margin='normal'\r\n                            value={bio}\r\n                            onChange={e => setBio(e.target.value)}\r\n                            fullWidth\r\n                        />\r\n                        <TextField\r\n                            name='website'\r\n                            type='text'\r\n                            label='Website'\r\n                            placeholder='Your personal/professional website'\r\n                            margin='normal'\r\n                            value={website}\r\n                            onChange={e => setWebsite(e.target.value)}\r\n                            fullWidth\r\n                        />\r\n                        <TextField\r\n                            name='location'\r\n                            type='text'\r\n                            label='Location'\r\n                            placeholder='Where do you live?'\r\n                            margin='normal'\r\n                            value={location}\r\n                            onChange={e => setLocation(e.target.value)}\r\n                            fullWidth\r\n                        />\r\n                    </form>\r\n                </DialogContent>\r\n                {/* Submit or close edit details form */}\r\n                <DialogActions>\r\n                    <Button onClick={() => setOpen(false)} color='primary'>Cancel</Button>\r\n                    <Button onClick={() => handleSubmit()} color='primary'>Save</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default EditDetails","import React from 'react'\r\nimport NoImg from '../images/no-img.png'\r\n//MUI\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport { ProfileSkeletonStyles } from '../util/MuiStyles/muiStyles'\r\n//Icons\r\nimport LocationOn from '@material-ui/icons/LocationOn'\r\nimport LinkIcon from '@material-ui/icons/Link'\r\nimport CalendarToday from '@material-ui/icons/CalendarToday'\r\n\r\n\r\nfunction ProfileSkeleton() {\r\n    //MUI\r\n    const useStyles = makeStyles(ProfileSkeletonStyles)\r\n    const classes = useStyles();\r\n    return (\r\n        //Render place holder fields while Profile is being loaded\r\n        <Paper className={classes.paper}>\r\n            <div className={classes.profile}>\r\n                <div className='image-wrapper'>\r\n                    <img src={NoImg} alt='Profile' className='profile-image' />\r\n                </div>\r\n                <hr />\r\n                <div className='profile-details'>\r\n                    <div className={classes.handle} />\r\n                    <hr />\r\n                    <div className={classes.fullLine} />\r\n                    <div className={classes.fullLine} />\r\n                    <hr />\r\n                    <LocationOn color='primary' /> <span>Location</span>\r\n                    <hr />\r\n                    <LinkIcon color='primary' /> <span>Website</span>\r\n                    <hr />\r\n                    <CalendarToday color='primary' /> <span>Joined</span>\r\n                </div>\r\n            </div>\r\n        </Paper>\r\n    )\r\n}\r\n\r\nexport default ProfileSkeleton\r\n","import React, { Fragment } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport dayjs from 'dayjs'\r\nimport EditDetails from './EditDetails'\r\nimport MyButton from '../../util/MyButton'\r\nimport ProfileSkeleton from '../../util/ProfileSkeleton'\r\n//MUI\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Button, Typography, Paper } from '@material-ui/core'\r\nimport { ProfileStyles } from '../../util/MuiStyles/muiStyles'\r\nimport MuiLink from '@material-ui/core/Link'\r\n//Icons\r\nimport LocationOn from '@material-ui/icons/LocationOn'\r\nimport LinkIcon from '@material-ui/icons/Link'\r\nimport EditIcon from '@material-ui/icons/Edit'\r\nimport CalendarToday from '@material-ui/icons/CalendarToday'\r\nimport KeyboardReturn from '@material-ui/icons/KeyboardReturn'\r\n//Redux\r\nimport { useSelector, shallowEqual, useDispatch } from 'react-redux'\r\nimport { logoutUser, uploadImage } from '../../redux/actions/userActions'\r\n\r\n\r\nfunction Profile() {\r\n    //MUI\r\n    const useStyles = makeStyles(ProfileStyles)\r\n    const classes = useStyles()\r\n    //Redux\r\n    const user = useSelector(state => state.user, shallowEqual);\r\n    const dispatch = useDispatch();\r\n    //=====================\r\n    //Event handlers\r\n    //=====================\r\n    //Update profile image\r\n    const handleImgChange = (event) => {\r\n        //Users chosen image\r\n        const image = event.target.files[0];\r\n        //Dispatch redux action that saves new images to DB and changes the image shown\r\n        const formData = new FormData();\r\n        formData.append('image', image, image.name);\r\n        dispatch(uploadImage(formData))\r\n    }\r\n    //Link between styled button and actual input\r\n    const handleEditImg = () => {\r\n        const fileInput = document.getElementById('imgUpload');\r\n        fileInput.click()\r\n    }\r\n    //Dispatch redux action that logs the user out\r\n    const handleLogout = () => {\r\n        dispatch(logoutUser())\r\n    }\r\n    //==================\r\n    //What is rendered \r\n    //==================\r\n    //Check if user is logged in\r\n    let profileMarkup = !user.loading ? (user.authenticated ? (\r\n        //If logged in, show user card\r\n        <Paper className={classes.paper}>\r\n            <div className={classes.profile}>\r\n                <div className='image-wrapper'>\r\n                    {/* Current profile pic */}\r\n                    <img src={user.credentials.imgUrl} alt=\"profile\" className='profile-image' />\r\n                    {/* Input that changes the image. Hidden from user */}\r\n                    <input type='file' id='imgUpload' hidden='hidden' onChange={handleImgChange} />\r\n                    {/* Button that triggers edit profile pic. Styled button visible to user */}\r\n                    <MyButton tip='Change Profile Picture' onClick={handleEditImg} btnClassName='button'>\r\n                        <EditIcon color='primary' />\r\n                    </MyButton>\r\n                </div>\r\n                <hr />\r\n                <div className='profile-details'>\r\n                    {/* User handle with link to profile page */}\r\n                    <MuiLink component={Link} to={`/users/${user.credentials.handle}`} color='primary' variant='h5'>\r\n                        @{user.credentials.handle}\r\n                    </MuiLink>\r\n                    <hr />\r\n                    {/* Users bio */}\r\n                    {user.credentials.bio && <Typography variant='body2'>{user.credentials.bio}</Typography>}\r\n                    <hr />\r\n                    {/* Users location, if provided */}\r\n                    {user.credentials.location && (\r\n                        <Fragment>\r\n                            <LocationOn color='primary' /> <span>{user.credentials.location}</span>\r\n                            <hr />\r\n\r\n                        </Fragment>\r\n                    )}\r\n                    {/* Users website, if provided */}\r\n                    {user.credentials.website && (\r\n                        <Fragment>\r\n                            <LinkIcon color='primary' />\r\n                            <a href={user.credentials.website} target='_blank' rel='noopener noreferrer'>\r\n                                {'   '}{user.credentials.website}\r\n                            </a>\r\n                            <hr />\r\n                        </Fragment>\r\n                    )}\r\n                    {/* Join date */}\r\n                    <CalendarToday color='primary' /> {' '}\r\n                    <span>Joined {dayjs(user.credentials.createdAt).format('MMM YYYY')}</span>\r\n                </div>\r\n                <MyButton tip='Logout' onClick={handleLogout}>\r\n                    <KeyboardReturn color='primary' />\r\n                </MyButton>\r\n                <EditDetails />\r\n            </div>\r\n        </Paper>\r\n    ) : (\r\n            // If not logged in, render this\r\n            <Paper className={classes.paper}>\r\n                <Typography variant='body2' align='center'>\r\n                    No profile found, please log in again.\r\n            </Typography>\r\n                <div className={classes.buttons}>\r\n                    <Button variant='contained' color='primary' component={Link} to='/login'>Login</Button>\r\n                    <Button variant='contained' color='secondary' component={Link} to='/signup'>Signup</Button>\r\n                </div>\r\n            </Paper>\r\n            //While getting profile from DB, show this as placeholder\r\n        )) : <ProfileSkeleton />\r\n\r\n    return profileMarkup;\r\n}\r\n\r\nexport default Profile","import React, { Fragment } from 'react'\r\nimport NoImg from '../images/no-img.png'\r\n//MUI\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card'\r\nimport CardMedia from '@material-ui/core/CardMedia'\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport { ScreamSkeletonStyles } from './MuiStyles/muiStyles';\r\n\r\n\r\nfunction ScreamSkeleton() {\r\n    //MUI\r\n    const useStyles = makeStyles(ScreamSkeletonStyles)\r\n    const classes = useStyles()\r\n    //Placeholder fields while screams are being loaded\r\n    const content = Array.from({ length: 5 }).map((item, index) => (\r\n        <Card className={classes.card} key={index}>\r\n            <CardMedia className={classes.cover} image={NoImg} />\r\n            <CardContent className={classes.content}>\r\n                <div className={classes.handle} />\r\n                <div className={classes.date} />\r\n                <div className={classes.fullLine} />\r\n                <div className={classes.fullLine} />\r\n                <div className={classes.halfLine} />\r\n            </CardContent>\r\n        </Card>\r\n    ))\r\n\r\n    return <Fragment>{content}</Fragment>\r\n}\r\n\r\nexport default ScreamSkeleton","import React, { useEffect } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Scream from '../components/scream/Scream';\nimport Profile from '../components/profile/Profile';\nimport ScreamSkeleton from '../util/ScreamSkeleton'\n//Redux\nimport { useSelector, useDispatch } from 'react-redux'\nimport { getScreams } from '../redux/actions/dataActions'\n//MUI\nimport { Typography, Paper } from '@material-ui/core';\n\nfunction Home() {\n  //Redux\n  const { loading, screams } = useSelector(state => state.data);\n  const dispatch = useDispatch();\n\n  //On page load, dispatch redux action that retrieves all screams\n  useEffect(() => {\n    dispatch(getScreams())\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  //Render a component for each scream retrieved from DB\n  let recentScreamsMarkUp = !loading ? (\n    screams.map(scream => {\n      return <Scream key={scream.screamId} scream={scream} />;\n    })\n    //While screams are loading, show placeholder scream\n  ) : <ScreamSkeleton />;\n\n  return (\n    <Grid container spacing={2}>\n      <Grid item sm={8} xs={12}>\n        {/* Render all screams */}\n        <Paper style={{backgroundColor: '#d1e8e2'}}>\n        <Typography style={{paddingTop: 15}} align='center' color='primary' variant='h4'>Most recent Screams!</Typography>\n          {recentScreamsMarkUp}\n        </Paper>\n      </Grid>\n      <Grid item sm={4} xs={12}>\n        {/* Render profile of the currently logged in user */}\n        <Profile />\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default Home;\n","import React, { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport AppLogo from '../images/distancing.png';\nimport { Link } from 'react-router-dom';\n//MUI\nimport { useTheme } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n// //REDUX\nimport { useSelector, useDispatch } from 'react-redux';\nimport { loginUser } from '../redux/actions/userActions';\n\nfunction Login() {\n  //MUI\n  const { palette } = useTheme();\n  //Redux\n  const UI = useSelector(state => state.UI);\n  const dispatch = useDispatch();\n  //State\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [errors, setErrors] = useState({});\n  //Util\n  const history = useHistory();\n  const userData = { email, password };\n\n  //Set errors to state if there are any\n  useEffect(() => {\n    if (UI.errors) { setErrors(UI.errors) }\n  }, [UI.errors])\n\n  //Dispatch redux action that logs the user in\n  function handleSubmit(event) {\n    event.preventDefault();\n    dispatch(loginUser(userData, history))\n  }\n\n  return (\n    <Grid style={palette.form}>\n      <Grid item sm>\n        <img src={AppLogo} alt='Social distancing' style={palette.image} />\n        <Typography variant='h3' style={palette.pageTitle}>\n          Login\n        </Typography>\n        {/* Login form */}\n        <form noValidate onSubmit={handleSubmit}>\n          <TextField\n            id='email'\n            name='email'\n            type='email'\n            label='Email'\n            style={palette.textField}\n            // Show errors if there are any\n            helperText={errors.email}\n            error={errors.email ? true : false}\n            value={email}\n            onChange={e => {\n              setEmail(e.target.value);\n            }}\n          />\n          <br />\n          <TextField\n            id='password'\n            name='password'\n            type='password'\n            label='Password'\n            style={palette.textField}\n            // Show errors if there are any\n            helperText={errors.password}\n            error={errors.password ? true : false}\n            value={password}\n            onChange={e => {\n              setPassword(e.target.value);\n            }}\n          />\n          <br />\n          {/* Show errors if there are any */}\n          {errors.general && (\n            <Typography variant='body2' style={palette.customError}>\n              {errors.general}\n            </Typography>\n          )}\n          <Button\n            type='submit'\n            variant='contained'\n            color='primary'\n            style={palette.button}\n            disabled={UI.loading}\n          >\n            Login\n            {/* While loading, show loading icon */}\n            {UI.loading && (\n              <CircularProgress size='1.5rem' style={palette.progress} />\n            )}\n          </Button>\n          <br />\n          <small>\n            {/* Link to signup page */}\n            Don't have an account? Sign up <Link to='/signup'>here</Link>\n          </small>\n        </form>\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default Login;\n","import React, { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport AppLogo from '../images/distancing.png';\nimport { Link } from 'react-router-dom';\n//MUI\nimport { useTheme } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n// //REDUX\nimport { useSelector, useDispatch } from 'react-redux';\nimport { signupUser } from '../redux/actions/userActions';\n\nfunction Signup() {\n  //MUI\n  const { palette } = useTheme();\n  //Redux\n  const dispatch = useDispatch();\n  const UI = useSelector(state => state.UI)\n  //State\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [handle, setHandle] = useState('');\n  const [errors, setErrors] = useState({});\n  //Util\n  const history = useHistory();\n  const newuserData = { email, password, confirmPassword, handle };\n\n  //Dispatch redux action that signs up the user and logs them in when form is submitted\n  const handleSubmit = event => {\n    event.preventDefault();\n    dispatch(signupUser(newuserData, history))\n  };\n  //Set errors if there are any\n  useEffect(() => {\n    if (UI.errors) { setErrors(UI.errors) }\n  }, [UI.errors])\n\n  return (\n    <Grid style={palette.form}>\n      <Grid item sm>\n        <img src={AppLogo} alt='Social distancing' style={palette.image} />\n        <Typography variant='h3' style={palette.pageTitle}>\n          Signup\n        </Typography>\n        {/* Signup form */}\n        <form noValidate onSubmit={handleSubmit}>\n          <TextField\n            id='email'\n            name='email'\n            type='email'\n            label='Email'\n            style={palette.textField}\n            // Show errors, if there are any\n            helperText={errors.email}\n            error={errors.email ? true : false}\n            value={email}\n            onChange={e => {\n              setEmail(e.target.value);\n            }}\n          />\n          <br />\n          <TextField\n            id='password'\n            name='password'\n            type='password'\n            label='Password'\n            style={palette.textField}\n            // Show errors, if there are any\n            helperText={errors.password}\n            error={errors.password ? true : false}\n            value={password}\n            onChange={e => {\n              setPassword(e.target.value);\n            }}\n          />\n          <br />\n          <TextField\n            id='confirmPassword'\n            name='confirmPassword'\n            type='password'\n            label='Confirm Password'\n            style={palette.textField}\n            // Show errors, if there are any\n            helperText={errors.confirmPassword}\n            error={errors.confirmPassword ? true : false}\n            value={confirmPassword}\n            onChange={e => {\n              setConfirmPassword(e.target.value);\n            }}\n          />\n          <br />\n          <TextField\n            id='handle'\n            name='handle'\n            type='text'\n            label='Handle'\n            style={palette.textField}\n            // Show errors, if there are any\n            helperText={errors.handle}\n            error={errors.handle ? true : false}\n            value={handle}\n            onChange={e => {\n              setHandle(e.target.value);\n            }}\n          />\n          <br />\n          {/* Show errors, if there are any */}\n          {errors.general && (\n            <Typography variant='body2' style={palette.customError}>\n              {errors.general}\n            </Typography>\n          )}\n          <Button\n            type='submit'\n            variant='contained'\n            color='primary'\n            style={palette.button}\n            disabled={UI.loading}\n          >\n            Signup\n            {/* While loading, show loading icon */}\n            {UI.loading && (\n              <CircularProgress size='1.5rem' style={palette.progress} />\n            )}\n          </Button>\n          <br />\n          <small>\n            {/* Link to login page */}\n            Already have an account? Login <Link to='/login'>here</Link>\n          </small>\n        </form>\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default Signup;\n","import React, { Fragment } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport dayjs from 'dayjs';\r\n//MUI\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper'\r\nimport MuiLink from '@material-ui/core/Link'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport { ProfileStyles } from '../../util/MuiStyles/muiStyles'\r\n//Icons\r\nimport LocationOn from '@material-ui/icons/LocationOn'\r\nimport LinkIcon from '@material-ui/icons/Link'\r\nimport CalendarToday from '@material-ui/icons/CalendarToday'\r\n\r\nfunction StaticProfile({ profile }) {\r\n    //MUI\r\n    const useStyles = makeStyles(ProfileStyles)\r\n    const classes = useStyles()\r\n    //Props\r\n    const { handle, createdAt, imgUrl, bio, website, location } = profile\r\n    //===============\r\n    //Render\r\n    //===============\r\n    return (\r\n        <Paper className={classes.paper}>\r\n            <div className={classes.profile}>\r\n                <div className='image-wrapper'>\r\n                    {/* Profile picture */}\r\n                    <img src={imgUrl} alt=\"profile\" className='profile-image' />\r\n                </div>\r\n                <hr />\r\n                <div className='profile-details'>\r\n                    {/* User handle, with link to users page  */}\r\n                    <MuiLink component={Link} to={`/users/${handle}`} color='primary' variant='h5'>\r\n                        @{handle}\r\n                    </MuiLink>\r\n                    <hr />\r\n                    {/* Bio, if provided */}\r\n                    {bio && <Typography variant='body2'>{bio}</Typography>}\r\n                    <hr />\r\n                    {/* Location, if provided */}\r\n\r\n                    {location && (\r\n                        <Fragment>\r\n                            <LocationOn color='primary' /> <span>{location}</span>\r\n                            <hr />\r\n                        </Fragment>\r\n                    )}\r\n                    {/* Website with link, if provided */}\r\n\r\n                    {website && (\r\n                        <Fragment>\r\n                            <LinkIcon color='primary' />\r\n                            <a href={website} target='_blank' rel='noopener noreferrer'>\r\n                                {'   '}{website}\r\n                            </a>\r\n                            <hr />\r\n                        </Fragment>\r\n                    )}\r\n                    {/* Join date */}\r\n                    <CalendarToday color='primary' /> {' '}\r\n                    <span>Joined {dayjs(createdAt).format('MMM YYYY')}</span>\r\n                </div>\r\n            </div>\r\n        </Paper>\r\n    )\r\n}\r\n\r\nexport default StaticProfile","import React, { useEffect, useState } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport axios from 'axios'\r\nimport Scream from '../components/scream/Scream'\r\nimport StaticProfile from '../components/profile/StaticProfile'\r\nimport ScreamSkeleton from '../util/ScreamSkeleton'\r\nimport ProfileSkeleton from '../util/ProfileSkeleton'\r\n//MUI\r\nimport Grid from '@material-ui/core/Grid'\r\n//Redux\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { getUserData } from '../redux/actions/dataActions'\r\n\r\nfunction User() {\r\n    //Redux\r\n    const { screams, loading } = useSelector(state => state.data)\r\n    const dispatch = useDispatch()\r\n    //State\r\n    const [profile, setProfile] = useState({})\r\n    const [screamIdParam, setScreamIdParam] = useState(null)\r\n    //Util\r\n    const { handle, screamId } = useParams()\r\n\r\n    //On page load, dispatch redux action that retrieves the desired user details from DB\r\n    useEffect(() => {\r\n        dispatch(getUserData(handle));\r\n        //Send axios request to retrieve user details to be passed down to StaticProfile component\r\n        axios.get(`/user/${handle}`).then(res => {\r\n            setProfile(res.data.user);\r\n            //Save possible scream id parameter to state\r\n            if (screamId) setScreamIdParam(screamId)\r\n        }).catch(err => console.log(err))\r\n    }, [])// eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    //Users screams\r\n    const screamsMarkup = loading ? (\r\n        //While loading, show placeholder\r\n        <ScreamSkeleton />\r\n    ) : screams === null ? //If no screams found:\r\n            <p>No screams found</p>\r\n            //If no scream paramater was passed in the URL, load all users screams\r\n            : !screamIdParam ? (\r\n                screams.map(scream => <Scream key={scream.screamId} scream={scream} />)\r\n            ) : (\r\n                    //If scream paramater was passed in URL and it matches one of the users screams, open scream dialog for that scream\r\n                    screams.map(scream => {\r\n                        if (scream.screamId !== screamIdParam)\r\n                            return <Scream key={scream.screamId} scream={scream} />\r\n                        else return <Scream key={scream.screamId} scream={scream} openDialog />\r\n                    })\r\n                )\r\n\r\n    return (\r\n        <Grid container spacing={2}>\r\n            <Grid item sm={8} xs={12}>\r\n                {/* Show all screams from the user */}\r\n                {screamsMarkup}\r\n            </Grid>\r\n            <Grid item sm={4} xs={12}>\r\n                {/* Show users profile or a placeholder while the profile is being received from DB */}\r\n                {profile === null ? <ProfileSkeleton /> : <StaticProfile profile={profile} />}\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default User","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport { ThemeProvider, unstable_createMuiStrictModeTheme as createMuiTheme } from '@material-ui/core/styles';\nimport themeFile from './util/MuiStyles/theme';\nimport jwtDecode from 'jwt-decode';\nimport axios from 'axios';\n// //Redux\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport { SET_AUTHENTICATED } from './redux/types'\nimport { logoutUser, getUserData } from './redux/actions/userActions'\n//Components\nimport Navbar from './components/layout/Navbar';\nimport AuthRoute from './util/AuthRoute';\n//Pages\nimport home from './pages/home';\nimport login from './pages/login';\nimport signup from './pages/signup';\nimport user from './pages/user'\n\n\nconst theme = createMuiTheme(themeFile);\n\naxios.defaults.baseURL = 'https://europe-west2-anttisocial-763c6.cloudfunctions.net/api'\n\nconst token = localStorage.FBIdToken;\nif (token) {\n  const decodedToken = jwtDecode(token);\n  if (decodedToken.exp * 1000 < Date.now()) {\n    store.dispatch(logoutUser())\n    window.location.href = '/login';\n  } else {\n    store.dispatch({ type: SET_AUTHENTICATED });\n    axios.defaults.headers.common['Authorization'] = token\n    store.dispatch(getUserData())\n  }\n}\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <Provider store={store}>\n        <Router>\n          <Navbar />\n          <div className='container'>\n            <Switch>\n              <Route exact path='/' component={home} />\n              <AuthRoute exact path='/login' component={login} />\n              <AuthRoute exact path='/signup' component={signup} />\n              <Route exact path='/users/:handle' component={user} />\n              <Route exact path='/users/:handle/scream/:screamId' component={user} />\n            </Switch>\n          </div>\n        </Router>\n      </Provider>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/distancing.921e6266.png\";","module.exports = __webpack_public_path__ + \"static/media/no-img.5a021ab9.png\";"],"sourceRoot":""}